// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String               @id @default(uuid())
  fullName                    String?
  email                       String               @unique
  phone                       String? // Added from frontend
  company                     String[]             @default([]) // Added from frontend - represents multiple organizations
  jobTitle                    String? // Added from frontend (referred to as 'Expertise')
  location                    String? // Added from frontend
  bio                         String? // Added from frontend
  avatar                      String? // Added from frontend
  joinDate                    DateTime             @default(now()) // Added from frontend
  lastLogin                   DateTime? // Added from frontend (though commented out in frontend) - Not currently used in frontend pages analyzed
  isEmailVerified             Boolean              @default(false) // Added from frontend
  isPhoneVerified             Boolean              @default(false) // Added from frontend (though commented out in frontend) - Not currently used in frontend pages analyzed
  password                    String
  emailVerificationToken      String?
  emailVerificationExpires    DateTime?
  organizationMembers         OrganizationMember[] // Inverse relation for OrganizationMember's 'user' field AND ALSO  A list of OrganizationMember entries where this user is the member
  createdWebsites             website[]            @relation("CreatedBy") // Tracks who created a website
  createdEscalationPolicies   EscalationPolicy[]   @relation("CreatedBy") // Tracks who created an escalation policy
  createdStatusPages          StatusPage[]         @relation("CreatedBy") // Tracks who created a status page
  createdReports              ReportService[]      @relation("CreatedBy") // Tracks who created a report service
  createdIntegrationsRelation Integration[]        @relation("CreatedByIntegration") // Tracks Integrations created by this user
  acknowledgedIncidents       Incident[]           @relation("AcknowledgedByIncident") // Incidents acknowledged by this user
  resolvedIncidents           Incident[]           @relation("ResolvedByIncident") // Incidents resolved by this user
  memberOfTeamEntries         TeamMember[] // TeamMember entries where this user is the member
  createdTeams                Team[]               @relation("CreatedTeam") // Teams created by this user
  sentInvitations             OrganizationMember[] @relation("InvitedBy") // Invitations sent by this user
}

model website {
  id                    String            @id @default(uuid())
  name                  String            @default("Unnamed Monitor")
  monitorType           MonitorType       @default(https)
  url                   String
  checkInterval         Int               @default(60000)
  method                Method            @default(GET)
  regions               String[]          @default(["India"])
  alertTime             Int               @default(0) // Not directly used in frontend pages analyzed
  severity              Severity          @default(low) // Not directly used in frontend pages analyzed
  timeAdded             DateTime          @default(now()) // Not directly used in frontend pages analyzed
  ticks                 WebsiteTick[] // Not directly used in frontend pages analyzed, but part of website relation
  organization          Organization      @relation(fields: [organizationId], references: [id])
  organizationId        String
  createdBy             User              @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created a website
  createdById           String
  escalationPolicyId    String?
  escalationPolicy      EscalationPolicy? @relation(fields: [escalationPolicyId], references: [id]) // Not directly used in frontend pages analyzed, but part of website relation
  incidents             Int               @default(0)
  lastChecked           DateTime          @default(now())
  currently_upForIndays Int               @default(0) // Not directly used in frontend pages analyzed
  tags                  String[]          @default([])
  nextCheckTime         DateTime? // Not directly used in frontend pages analyzed
  uptime                Float             @default(100) // Explicitly set as float, aligned with frontend
  responseTimeMs        Int               @default(0) // Added from frontend (referred to as responseTime)
  isActive              Boolean           @default(true) // Added from frontend
  downtimeToday         Int               @default(0) // Added from frontend - Not currently used in frontend pages analyzed
  avgResponseTime24h    Int               @default(0) // Added from frontend
  uptimeTrend           UptimeTrend       @default(ONLINE) // Added from frontend
}

model EscalationPolicy {
  id            String   @id @default(uuid())
  name          String
  description   String?
  priorityLevel Priority @default(low)
  tags          String[] @default([])
  isActive      Boolean  @default(true)

  // Trigger Conditions (embedded as JSON or separate fields)
  monitorsDown Boolean @default(true)
  // responseTimeThreshold Boolean @default(false)
  // responseTimeValue     Int?    @default(5000)
  // sslExpiry            Boolean @default(false)
  // sslExpiryDays        Int?    @default(30)
  // domainExpiry         Boolean @default(false)
  // domainExpiryDays     Int?    @default(30)
  // statusCodeErrors     Boolean @default(false)
  // statusCodes          String[] @default([])
  // heartbeatMissed      Boolean @default(false)
  // heartbeatMissedCount Int?    @default(3)

  steps          EscalationStep[]
  websites       website[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  createdBy      User             @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created an escalation policy
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([name, organizationId])
}

model EscalationStep {
  id       String           @id @default(uuid())
  policyId String
  policy   EscalationPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade) // Not directly used in frontend pages analyzed, but part of EscalationStep relation

  stepOrder Int // order of step (1, 2, 3, etc.)

  // Alert Methods - storing as JSON arrays to match frontend structure
  primaryMethods    String[] @default([]) // ["email", "sms", "phone"]
  additionalMethods String[] @default([]) // ["slack", "discord", "webhook"]

  recipients    String[] // list of user IDs, team names, or external contacts - Not directly used in frontend pages analyzed (though mentioned in concepts)
  delayMinutes  Int      @default(0) // wait before this step triggers - Not directly used in frontend pages analyzed (though mentioned in concepts)
  escalateAfter Int      @default(5) // wait before escalating to next step (in minutes) - Not directly used in frontend pages analyzed (though mentioned in concepts)
  customMessage String? // Not directly used in frontend pages analyzed (though mentioned in concepts)

  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  @@unique([policyId, stepOrder]) // ensure unique step order per policy
}

// Integration model to track available notification methods
model Integration {
  id           String  @id @default(uuid())
  name         String // "Slack", "Discord", "Webhook", etc. - Not directly used in frontend pages analyzed (though conceptually related)
  type         String // "slack", "discord", "webhook", "teams", etc. - Not directly used in frontend pages analyzed (though conceptually related)
  isActive     Boolean @default(false)
  isIntegrated Boolean @default(false)

  // Integration-specific configuration (stored as JSON)
  configuration Json? // webhook URLs, channel IDs, etc. - Not directly used in frontend pages analyzed (though conceptually related)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdBy      User         @relation("CreatedByIntegration", fields: [createdById], references: [id]) // Tracks who created an integration
  createdById    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String       @id @default(uuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  members        TeamMember[] // Team members linked via TeamMember model
  createdBy      User         @relation("CreatedTeam", fields: [createdById], references: [id]) // Tracks who created this team
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model TeamMember {
  id         String   @id @default(uuid())
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  isTeamLead Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique // e.g., "manage_monitors", "view_billing"
  description String?
  roles       Role[]  @relation("RolePermissions")
}

model Role {
  id                  String               @id @default(uuid())
  name                String               @unique // e.g., "Admin", "Responder"
  description         String?
  permissions         Permission[]         @relation("RolePermissions")
  organizationMembers OrganizationMember[]
  teamMembers         TeamMember[]
}

enum Priority {
  critical
  high
  medium
  low
}

model Region {
  id    String        @id @default(uuid())
  name  String        @unique
  ticks WebsiteTick[] // Not directly used in frontend pages analyzed, but part of Region relation
}

model WebsiteTick {
  id               String        @id @default(uuid())
  response_time_ms Int
  status           WebsiteStatus
  Website_         website       @relation(fields: [website_id], references: [id]) // Not directly used in frontend pages analyzed, but part of WebsiteTick relation
  Region_          Region        @relation(fields: [region_id], references: [id]) // Not directly used in frontend pages analyzed, but part of WebsiteTick relation
  website_id       String
  region_id        String
  createdAt        DateTime      @default(now())
}

enum WebsiteStatus {
  Online
  Offline
  Unknown
  Paused // Added from frontend
  Maintenance // Added as requested
}

enum MonitorType {
  https
  http
  // ping // Added from frontend
  // tcp // Added from frontend
  // dns // Added from frontend
}

enum Method {
  GET
}

enum Severity {
  critical
  high
  medium
  low
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE // Added from frontend
}

enum ReportServiceStatus {
  OPERATIONAL // Added from frontend
  DOWN // Added from frontend
  MAINTENANCE // Added from frontend
}

enum IncidentStatus {
  RESOLVED // Added from frontend
  INVESTIGATING // Added from frontend
  MONITORING // Added from frontend
  OPERATIONAL // Added as requested
  DOWN // Added as requested
  MAINTENANCE // Added as requested
}

enum IncidentSeverity {
  CRITICAL // Added from frontend
  MAJOR // Added from frontend
  MINOR // Added from frontend
  MAINTENANCE // Re-added as requested
  NONE // Added from frontend
}

enum StatusPageStatus {
  OPERATIONAL // Added from frontend
}

enum StatusPageVisibility {
  PUBLIC // Added from frontend
}

enum ServiceStatus {
  OPERATIONAL // Added from frontend
  DOWN // Added from frontend
}

model StatusPage {
  id             String               @id @default(cuid())
  name           String
  subdomain      String               @unique
  customDomain   String?
  description    String
  status         StatusPageStatus
  visibility     StatusPageVisibility
  // password              String? // Added from frontend
  services       ServiceGroup[] // AI-generated relation to ServiceGroup
  incidents      Int                  @default(0) // Added from frontend
  uptime         Float                @default(100) // Added from frontend
  lastUpdated    DateTime             @updatedAt // Added from frontend
  isPublished    Boolean              @default(false) // Added from frontend
  createdAt      DateTime             @default(now()) // Added from frontend
  theme          String // Added from frontend
  logo           String? // Added from frontend
  primaryColor   String // Added from frontend
  headerBg       String // Added from frontend
  // emailNotifications    Boolean            @default(false) // Added from frontend
  // slackNotifications    Boolean            @default(false) // Added from frontend
  // webhookNotifications  Boolean            @default(false) // Added from frontend
  // smsNotifications      Boolean            @default(false) // Added from frontend
  // showUptime            Boolean            @default(true) // Added from frontend
  // showIncidents         Boolean            @default(true) // Added from frontend
  // showMetrics           Boolean            @default(true) // Added from frontend
  customCSS      String? // Added from frontend
  customHTML     String? // Added from frontend
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  createdBy      User                 @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created a status page
  createdById    String
}

model ServiceGroup {
  id           String        @id @default(cuid())
  name         String
  services     Service[] // AI-generated relation to Service
  status       ServiceStatus
  statusPageId String // AI-generated relation field
  statusPage   StatusPage    @relation(fields: [statusPageId], references: [id]) // AI-generated relation
}

model Service {
  id             String        @id @default(cuid())
  name           String
  status         ServiceStatus
  uptime         Float         @default(100) // Added from frontend
  monitorId      String? // Added from frontend  // here monitor id is equal to the website_id
  serviceGroupId String // AI-generated relation field
  serviceGroup   ServiceGroup  @relation(fields: [serviceGroupId], references: [id]) // AI-generated relation
}

model Organization {
  id                 String               @id @default(cuid())
  name               String               @unique
  description        String?
  status             OrganizationStatus   @default(ACTIVE)
  totalMembers       Int                  @default(0) // Added from frontend (as memberCount)
  createdOn          DateTime             @default(now()) // Added from frontend (as createdDate)
  industry           String? // Added from frontend
  location           String? // Added from frontend
  memberSince        DateTime?            @default(now()) // Added from frontend
  foundedYear        Int? // Added from frontend
  about              String? // Added from frontend
  members            OrganizationMember[] // AI-generated relation to OrganizationMember
  websites           website[]
  escalationPolicies EscalationPolicy[]
  integrations       Integration[]
  statusPages        StatusPage[]
  reportServices     ReportService[]
  incidents          Incident[]
  teams              Team[] // AI-generated relation to Team
}

model OrganizationMember {
  id             String       @id @default(cuid())
  name           String
  email          String       @unique
  roleId         String
  role           Role         @relation(fields: [roleId], references: [id])
  organizationId String // AI-generated relation field
  organization   Organization @relation(fields: [organizationId], references: [id]) // AI-generated relation
  userId         String? // Made optional to support inactive memberships
  user           User?        @relation(fields: [userId], references: [id]) // AI-generated relation
  isVerified     Boolean      @default(false)
  invitedBy      User?        @relation("InvitedBy", fields: [invitedById], references: [id]) // User who invited this member
  invitedById    String?
}

model ReportService {
  id             String              @id @default(cuid())
  name           String
  url            String
  status         ReportServiceStatus
  uptime         Float
  avgResponse    Int // Added from frontend
  incidents      Int // Added from frontend
  lastChecked    DateTime // Added from frontend
  Incidents      Incident[] // AI-generated relation to Incident
  organization   Organization        @relation(fields: [organizationId], references: [id])
  organizationId String
  createdBy      User                @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created a report service
  createdById    String
}

model Incident {
  id               String           @id @default(cuid())
  title            String
  serviceName      String // Added from frontend
  status           IncidentStatus
  severity         IncidentSeverity
  startTime        DateTime // Added from frontend
  endTime          DateTime? // Added from frontend
  duration         String // Added from frontend
  impact           String // Added from frontend
  serviceId        String? // AI-generated relation field
  service          ReportService?   @relation(fields: [serviceId], references: [id]) // AI-generated relation
  organization     Organization     @relation(fields: [organizationId], references: [id])
  organizationId   String
  createdAt        DateTime         @default(now())
  Acknowledged     Boolean          @default(false)
  AcknowledgedBy   User?            @relation("AcknowledgedByIncident", fields: [acknowledgedById], references: [id]) // User who acknowledged the incident
  acknowledgedById String?
  Resolved         Boolean          @default(false)
  ResolvedBy       User?            @relation("ResolvedByIncident", fields: [resolvedById], references: [id]) // User who resolved the incident
  resolvedById     String?
}

enum UptimeTrend {
  ONLINE // Added from frontend
  OFFLINE // Added from frontend
}
