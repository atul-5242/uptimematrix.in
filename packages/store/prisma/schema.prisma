// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                 @id @default(uuid())
  fullName                        String?
  email                           String                 @unique
  phone                           String? 
  company                         String[]               @default([]) 
  jobTitle                        String? 
  location                        String? 
  bio                             String? 
  avatar                          String? 
  joinDate                        DateTime               @default(now()) 
  lastLogin                       DateTime? 
  isEmailVerified                 Boolean                @default(false) 
  isPhoneVerified                 Boolean                @default(false) 
  password                        String
  selectedOrganizationId          String?
  selectedOrganizationRole        String? // Store role like "Admin", "Member", etc.
  selectedOrganizationPermissions String[]               @default([]) // Store a list of permissions for the selected organization
  emailVerificationToken          String?
  emailVerificationExpires        DateTime?
  organizationMembers             OrganizationMember[] // Inverse relation for OrganizationMember's 'user' field AND ALSO  A list of OrganizationMember entries where this user is the member
  createdWebsites                 website[]              @relation("CreatedBy") // Tracks who created a website
  createdEscalationPolicies       EscalationPolicy[]     @relation("CreatedBy") // Tracks who created an escalation policy
  createdStatusPages              StatusPage[]           @relation("CreatedBy") // Tracks who created a status page
  createdReports                  ReportService[]        @relation("CreatedBy") // Tracks who created a report service
  createdIntegrationsRelation     Integration[]          @relation("CreatedByIntegration") // Tracks Integrations created by this user
  acknowledgedIncidents           Incident[]             @relation("AcknowledgedByIncident") // Incidents acknowledged by this user
  resolvedIncidents               Incident[]             @relation("ResolvedByIncident") // Incidents resolved by this user
  memberOfTeamEntries             TeamMember[] // TeamMember entries where this user is the member
  createdTeams                    Team[]                 @relation("CreatedTeam") // Teams created by this user
  sentInvitations                 OrganizationMember[]   @relation("InvitedBy") // Invitations sent by this user
  onCallUserAssignments           OnCallUserAssignment[]
}

model website {
  id                    String            @id @default(uuid())
  name                  String            @default("Unnamed Monitor")
  monitorType           MonitorType       @default(https)
  url                   String
  checkInterval         Int               @default(60000)
  method                Method            @default(GET)
  regions               String[]          @default(["India"])
  alertTime             Int               @default(0) 
  severity              Severity          @default(low) 
  timeAdded             DateTime          @default(now()) 
  ticks                 WebsiteTick[] 
  organization          Organization      @relation(fields: [organizationId], references: [id])
  organizationId        String
  createdBy             User              @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created a website
  createdById           String
  escalationPolicyId    String?
  escalationPolicy      EscalationPolicy? @relation(fields: [escalationPolicyId], references: [id]) 
  incidents             Int               @default(0)
  lastChecked           DateTime          @default(now())
  currently_upForIndays Int               @default(0) 
  tags                  String[]          @default([])
  nextCheckTime         DateTime? 
  uptime                Float             @default(100) // Explicitly set as float, aligned with frontend
  responseTimeMs        Int               @default(0) 
  isActive              Boolean           @default(true) 
  downtimeToday         Int               @default(0) 
  avgResponseTime24h    Int               @default(0) 
  uptimeTrend           UptimeTrend       @default(ONLINE) 
  Incidents             Incident[] // Add this inverse relation
}

model EscalationPolicy {
  id            String   @id @default(uuid())
  name          String
  description   String?
  priorityLevel Priority @default(low)
  tags          String[] @default([])
  isActive      Boolean  @default(true)

  // Trigger Conditions (embedded as JSON or separate fields)
  monitorsDown Boolean @default(true)
  // responseTimeThreshold Boolean @default(false)
  // responseTimeValue     Int?    @default(5000)
  // sslExpiry            Boolean @default(false)
  // sslExpiryDays        Int?    @default(30)
  // domainExpiry         Boolean @default(false)
  // domainExpiryDays     Int?    @default(30)
  // statusCodeErrors     Boolean @default(false)
  // statusCodes          String[] @default([])
  // heartbeatMissed      Boolean @default(false)
  // heartbeatMissedCount Int?    @default(3)

  terminationCondition          String? @default("stop_after_last_step")
  repeatLastStepIntervalMinutes Int?    @default(30)

  steps          EscalationStep[]
  websites       website[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  createdBy      User             @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created an escalation policy
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([name, organizationId])
}

model EscalationStep {
  id       String           @id @default(uuid())
  policyId String
  policy   EscalationPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade) 

  stepOrder Int // order of step (1, 2, 3, etc.)

  // Alert Methods - storing as JSON arrays to match frontend structure
  primaryMethods    String[] @default([]) // ["email", "sms", "phone"]
  additionalMethods String[] @default([]) // ["slack", "discord", "webhook"]

  recipients    String[] // list of user IDs, team names, or external contacts 
  delayMinutes  Int      @default(0) // wait before this step triggers 
  repeatCount   Int      @default(1)
  escalateAfter Int      @default(5) // wait before escalating to next step (in minutes) 
  customMessage String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([policyId, stepOrder]) // ensure unique step order per policy
}

// Integration model to track available notification methods
model Integration {
  id           String  @id @default(uuid())
  name         String // "Slack", "Discord", "Webhook", etc. - Not directly used in frontend pages analyzed (though conceptually related)
  type         String // "slack", "discord", "webhook", "teams", etc. - Not directly used in frontend pages analyzed (though conceptually related)
  isActive     Boolean @default(false)
  isIntegrated Boolean @default(false)

  // Integration-specific configuration (stored as JSON)
  configuration Json? // webhook URLs, channel IDs, etc. - Not directly used in frontend pages analyzed (though conceptually related)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdBy      User         @relation("CreatedByIntegration", fields: [createdById], references: [id]) // Tracks who created an integration
  createdById    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id                    String                 @id @default(uuid())
  name                  String
  description           String?
  organizationId        String
  organization          Organization           @relation(fields: [organizationId], references: [id])
  members               TeamMember[] // Team members linked via TeamMember model
  createdBy             User                   @relation("CreatedTeam", fields: [createdById], references: [id]) // Tracks who created this team
  createdById           String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  onCallTeamAssignments OnCallTeamAssignment[]
}

model TeamMember {
  id         String   @id @default(uuid())
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  isTeamLead Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique // e.g., "manage_monitors", "view_billing"
  description String?
  roles       Role[]  @relation("RolePermissions")
}

model Role {
  id                  String               @id @default(uuid())
  name                String               @unique // e.g., "Admin", "Responder"
  description         String?
  permissions         Permission[]         @relation("RolePermissions")
  organizationMembers OrganizationMember[]
  teamMembers         TeamMember[]
}

enum Priority {
  critical
  high
  medium
  low
}

model Region {
  id    String        @id @default(uuid())
  name  String        @unique
  ticks WebsiteTick[] 
}

model WebsiteTick {
  id               String        @id @default(uuid())
  response_time_ms Int
  status           WebsiteStatus
  Website_         website       @relation(fields: [website_id], references: [id]) 
  Region_          Region        @relation(fields: [region_id], references: [id]) 
  website_id       String
  region_id        String
  createdAt        DateTime      @default(now())
}

enum WebsiteStatus {
  Online
  Offline
  Unknown
  Paused 
  Maintenance 
}

enum MonitorType {
  https
  http
  // ping 
  // tcp 
  // dns 
}

enum Method {
  GET
}

enum Severity {
  critical
  high
  medium
  low
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE 
}

enum ReportServiceStatus {
  OPERATIONAL 
  DOWN 
  MAINTENANCE 
}

enum IncidentStatus {
  RESOLVED 
  INVESTIGATING 
  MONITORING 
  OPERATIONAL 
  DOWN 
  MAINTENANCE 
}

enum IncidentSeverity {
  CRITICAL 
  MAJOR 
  MINOR 
  MAINTENANCE 
  NONE 
}

enum StatusPageStatus {
  OPERATIONAL 
}

enum StatusPageVisibility {
  PUBLIC 
}

enum ServiceStatus {
  OPERATIONAL 
  DOWN 
}

model StatusPage {
  id             String               @id @default(cuid())
  name           String
  subdomain      String               @unique
  customDomain   String?
  description    String
  status         StatusPageStatus
  visibility     StatusPageVisibility
  // password              String? 
  services       ServiceGroup[] 
  incidents      Int                  @default(0) 
  uptime         Float                @default(100) 
  lastUpdated    DateTime             @updatedAt 
  isPublished    Boolean              @default(false) 
  createdAt      DateTime             @default(now()) 
  theme          String 
  logo           String? 
  primaryColor   String 
  headerBg       String 
  // emailNotifications    Boolean            @default(false) 
  // slackNotifications    Boolean            @default(false) 
  // webhookNotifications  Boolean            @default(false) 
  // smsNotifications      Boolean            @default(false) 
  // showUptime            Boolean            @default(true) 
  // showIncidents         Boolean            @default(true) 
  // showMetrics           Boolean            @default(true) 
  customCSS      String? 
  customHTML     String? 
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  createdBy      User                 @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created a status page
  createdById    String
}

model ServiceGroup {
  id           String        @id @default(cuid())
  name         String
  services     Service[] 
  status       ServiceStatus
  statusPageId String 
  statusPage   StatusPage    @relation(fields: [statusPageId], references: [id]) 
}

model Service {
  id             String        @id @default(cuid())
  name           String
  status         ServiceStatus
  uptime         Float         @default(100) 
  monitorId      String? 
  serviceGroupId String 
  serviceGroup   ServiceGroup  @relation(fields: [serviceGroupId], references: [id]) 
}

model Organization {
  id                 String               @id @default(cuid())
  name               String               @unique
  description        String?
  status             OrganizationStatus   @default(ACTIVE)
  totalMembers       Int                  @default(0) 
  createdOn          DateTime             @default(now()) 
  industry           String? 
  location           String? 
  memberSince        DateTime?            @default(now()) 
  foundedYear        Int? 
  about              String? 
  members            OrganizationMember[] 
  websites           website[]
  escalationPolicies EscalationPolicy[]
  integrations       Integration[]
  statusPages        StatusPage[]
  reportServices     ReportService[]
  incidents          Incident[]
  teams              Team[] 
  onCallSchedules    OnCallSchedule[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  name           String
  email          String
  roleId         String
  role           Role         @relation(fields: [roleId], references: [id])
  organizationId String 
  organization   Organization @relation(fields: [organizationId], references: [id]) // AI-generated relation
  userId         String? // Made optional to support inactive memberships
  user           User?        @relation(fields: [userId], references: [id]) // AI-generated relation
  isVerified     Boolean      @default(false)
  invitedBy      User?        @relation("InvitedBy", fields: [invitedById], references: [id]) // User who invited this member
  invitedById    String?
  invitationLink String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@unique([email, organizationId])
}

model ReportService {
  id             String              @id @default(cuid())
  name           String
  url            String
  status         ReportServiceStatus
  uptime         Float
  avgResponse    Int 
  incidents      Int 
  lastChecked    DateTime 
  Incidents      Incident[] 
  organization   Organization        @relation(fields: [organizationId], references: [id])
  organizationId String
  createdBy      User                @relation("CreatedBy", fields: [createdById], references: [id]) // Tracks who created a report service
  createdById    String
}

model Incident {
  id                      String           @id @default(cuid())
  title                   String
  serviceName             String
  status                  IncidentStatus
  severity                IncidentSeverity
  startTime               DateTime
  endTime                 DateTime?
  duration                String
  impact                  String
  serviceId               String?
  service                 ReportService?   @relation(fields: [serviceId], references: [id])
  organization            Organization     @relation(fields: [organizationId], references: [id])
  organizationId          String
  createdAt               DateTime         @default(now())
  Acknowledged            Boolean          @default(false)
  AcknowledgedBy          User?            @relation("AcknowledgedByIncident", fields: [acknowledgedById], references: [id])
  acknowledgedById        String?
  Resolved                Boolean          @default(false)
  ResolvedBy              User?            @relation("ResolvedByIncident", fields: [resolvedById], references: [id])
  resolvedById            String?
  
  currentEscalationStepId String?
  nextEscalationTime      DateTime?        // When the next escalation action should happen
  escalationStepStartTime DateTime?        // When the current step actually started (after delayMinutes)
  currentRepeatCount      Int              @default(0) // How many times current step has been repeated
  stepDelayCompleted      Boolean          @default(false) // Whether delayMinutes has passed for current step
  
  createdById             String?
  websiteId               String?
  website                 website?         @relation(fields: [websiteId], references: [id])
}

enum UptimeTrend {
  ONLINE 
  OFFLINE 
}

model OnCallSchedule {
  id              String                 @id @default(uuid())
  name            String
  description     String?
  organization    Organization           @relation(fields: [organizationId], references: [id])
  organizationId  String
  userAssignments OnCallUserAssignment[]
  teamAssignments OnCallTeamAssignment[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@unique([name, organizationId])
}

model OnCallUserAssignment {
  id         String         @id @default(uuid())
  schedule   OnCallSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId String
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, scheduleId])
}

model OnCallTeamAssignment {
  id         String         @id @default(uuid())
  schedule   OnCallSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId String
  team       Team           @relation(fields: [teamId], references: [id])
  teamId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([teamId, scheduleId])
}
